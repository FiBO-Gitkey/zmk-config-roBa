#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESCAPE Q      &kp W         &kp E         &kp R            &kp T                                                 &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LEFT_SHIFT A  &kp S         &kp D         &kp F            &kp G        &kp LS(LG(S))           &kp MINUS        &kp H        &kp J  &kp K      &kp L    &mt RIGHT_SHIFT MINUS
&mt LCTRL Z       &kp X         &kp C         &kp V            &kp B        &kp COLON               &kp SEMICOLON    &kp N        &kp M  &kp COMMA  &kp DOT  &mt RCTRL SLASH
&kp LCTRL         &kp LEFT_ALT  &kp LEFT_WIN  &lt 3 LA(TILDE)  &lt 5 SPACE  &lt 3 LS(CAPSLOCK)      &lt 2 BACKSPACE  &lt 1 ENTER                             &lt 6 DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        NUMSandARROWS {
            bindings = <
&trans       &kp KP_N7  &kp KP_N8   &kp KP_N9  &kp MINUS                            &kp PG_UP  &trans          &trans          &trans           &trans
&kp TAB      &kp KP_N4  &kp KP_N5   &kp KP_N6  &kp PLUS      &trans         &trans  &kp PG_DN  &kp LS(TAB)     &kp UP_ARROW    &kp TAB          &trans
&kp LS(TAB)  &kp KP_N1  &kp KP_N2   &kp KP_N3  &kp ASTERISK  &kp SLASH      &trans  &kp HOME   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans       &kp KP_N0  &kp PERIOD  &trans     &trans        &trans         &trans  &trans                                                      &trans
            >;
        };

        SYMBOLSandFUNCTIONS {
            bindings = <
&kp EXCLAMATION    &kp AT_SIGN    &kp AMPERSAND         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                         &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&kp HASH           &kp DOLLAR     &kp PERCENT           &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans         &trans  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp SINGLE_QUOTE   &kp SEMICOLON  &kp COLON             &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE      &trans  &trans  &trans  &trans  &trans  &kp F11
&kp DOUBLE_QUOTES  &kp SLASH      &kp NON_US_BACKSLASH  &trans                &trans                 &trans         &trans  &trans                          &kp F12
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans          &kp UP_ARROW    &trans           &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans          &trans          &trans           &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSEandCOMMANDS {
            bindings = <
&trans          &trans    &kp UP_ARROW    &trans     &trans                                  &trans  &trans    &trans    &trans    &trans
&kp LEFT_ARROW  &mkp MB2  &mkp MB3        &mkp MB1   &kp RIGHT_ARROW  &trans         &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans          &trans    &kp DOWN_ARROW  &trans     &trans           &trans         &trans  &trans  &trans    &trans    &trans    &trans
&trans          &trans    &trans          &kp LC(C)  &kp LC(V)        &kp LC(X)      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SETTINGS {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &trans
            >;
        };
    };
};
